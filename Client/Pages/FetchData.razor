@page "/timegoals"
@inject HttpClient _client
@inject IJSRuntime _js

<h3>Time Budget</h3>
<small>Add Your Time Limits Here for your life.</small>
<div class="form-group">
    <a class="btn btn-success" href="/TimeBudgetItems/Create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>

@if (TimeLimits.Count == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Id</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Time Allotted</th>
        </tr>
        </thead>
        <tbody>
        @foreach (TimeLimit limit in TimeLimits)
        {
            <tr>
                <td>@limit.TimeLimitID</td>
                <td>@limit.Description</td>
                <td>@limit.Priority</td>
                <td>@limit.TimeSpan.TotalSeconds</td>
                <td>
                    <a class="btn btn-success" href="developer/edit/@limit.TimeLimitID">Edit</a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(limit.TimeLimitID))">Delete</button>
                </td>
            </tr>
        }

        </tbody>
    </table>
}
@code {

    public bool Loaded { get; set; }

    List<TimeLimit> TimeLimits { get; set; }

    public FetchData()
    {
        TimeLimits = new List<TimeLimit>();
    }

    protected override async Task OnInitializedAsync()
    {
        TimeLimits = await _client.GetFromJsonAsync<List<TimeLimit>>("api/timelimit") ?? new List<TimeLimit>();
        Loaded = true;
    }

    async Task Delete(int timeLimitId)
    {
        var dev = TimeLimits.First(x => x.TimeLimitID == timeLimitId);
        if (await _js.InvokeAsync<bool>("confirm", $"Do you want to delete {dev.Description}'s ({dev.TimeLimitID}) Record?"))
        {
            await _client.DeleteAsync($"api/developer/{timeLimitId}");
            await OnInitializedAsync();
        }
    }
}