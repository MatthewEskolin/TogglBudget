@page "/timegoals"
@using System.Diagnostics
@inject HttpClient _client
@inject IJSRuntime _js

<h3>Time Budgets</h3>

<small>Put every second towards living well</small>

<div class="form-group">
    <a class="btn btn-success" href="/TimeBudgetItems/Create"><i class="oi oi-plus"></i>New Allotment</a>
</div>
<br>

@if (TimeLimits.Count == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Id</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Time Allotted</th>
            <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        @foreach (TimeLimit limit in TimeLimits)
        {
            <tr>
                <td>@limit.TimeLimitID</td>
                <td>@limit.Description</td>
                <td>@limit.Priority</td>
                <td>@limit?.TimeSpan?.TotalSeconds</td>
                <td>
                    @if (limit != null) { <a class="btn btn-success" href="developer/edit/@limit.TimeLimitID">Edit</a> }
                    <button class="btn btn-danger" @onclick="@(() => Delete(limit.TimeLimitID))">Delete</button>
                </td>
            </tr>
        }

        </tbody>
    </table>
}
@code {

    public bool Loaded { get; set; }

    List<TimeLimit> TimeLimits { get; set; }

    public TimeGoals()
    {
        TimeLimits = new List<TimeLimit>();
    }

    protected override async Task OnInitializedAsync()
    {
        Debug.WriteLine($"OnInitialized Starting");

        TimeLimits = await _client.GetFromJsonAsync<List<TimeLimit>>("api/timelimit") ?? new List<TimeLimit>();
        Loaded = true;

        Debug.WriteLine($"OnInitializedAsync Done");
    }

    async Task Delete(int timeLimitId)
    {

        Debug.WriteLine($"Delete Starting");

        var dev = TimeLimits.First(x => x.TimeLimitID == timeLimitId);
        if (await _js.InvokeAsync<bool>("confirm", $"Do you want to delete {dev.Description}'s ({dev.TimeLimitID}) Record?"))
        {
            await _client.DeleteAsync($"api/timelimit/{timeLimitId}");
            await OnInitializedAsync();
        }

        Debug.WriteLine($"Delete Ending ");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var first = firstRender ? "First" : "Non-First";
        Debug.WriteLine($"After Render {first}");
    }


}